{
  "name": "grunt-casper",
  "description": "Run Casper CLI Scripts With Grunt",
  "version": "0.2.1",
  "author": {
    "name": "Chris Miller",
    "email": "cmille142@gmail.com",
    "url": "http://chris-miller.me"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:iamchrismiller/grunt-casper.git"
  },
  "bugs": {
    "url": "https://github.com/iamchrismiller/grunt-casper/issues/"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/iamchrismiller/grunt-casper/blob/master/LICENSE-MIT"
    }
  ],
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.4",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-nodeunit": "~0.2.1",
    "grunt": "~0.4.2",
    "grunt-cli": "~0.1.11"
  },
  "scripts": {
    "test": "grunt test"
  },
  "keywords": [
    "gruntplugin",
    "gruntjs",
    "casperjs",
    "grunt-casperjs",
    "grunt-casper"
  ],
  "dependencies": {
    "grunt-lib-contrib": "~0.6.1",
    "duration": "~0.1.4"
  },
  "readme": "# grunt-casper [![Build Status](https://secure.travis-ci.org/iamchrismiller/grunt-casper.png?branch=master)](http://travis-ci.org/iamchrismiller/grunt-casper)\n\n> Run CasperJS Scripts/Functional Tests\n\nPhantomJS v1.8.1 or later is required for **Casperjs v1.1**.\n\nIf You need Casper 1.0 Support - Please Check out this [tag](https://github.com/iamchrismiller/grunt-casper/tree/1.0)\n\n## Installation\n\nThis task makes use of PhantomJS to drive the casperJS scripts in a headless manner.\n\nYou will need to install [phantomjs](http://phantomjs.org/), with a fairly simple package [install](http://phantomjs.org/download.html)\nAfter [phantomjs](http://phantomjs.org/) is installed, you will need to install [casperjs](http://casperjs.org/installation.html)\n\nNow install the grunt task\n\n```shell\nnpm install grunt-casper --save\n```\n\n## Getting Started\n\nCasperJS is a navigation scripting & testing utility for PhantomJS. It eases the process of defining a full navigation scenario and provides useful high-level functions, methods & syntaxic sugar for doing common tasks in a headless browser.\n\nIf you haven't used [casperjs](http://casperjs.org/) before, be sure to check out the [Get Started](http://casperjs.org/quickstart.html) guide, as it explains how to create your first test case.\n\n\n## casperjs task\n_Run this task with the `grunt casperjs` command._\n\n_This task is a [multi task](https://github.com/gruntjs/grunt/wiki/Configuring-tasks) so any targets, files and options should be specified according to the [multi task][] documentation._\n\n### Options\n\n#### Grunt 'dest'\nType: `String` `Function`\n\nThe 'dest' option in Grunt's configuration is passed as the --save option to casper, allowing you to access\n   your destination programmatically. If passed as a function, the return value will be used.\n\n#### test\nType: `Boolean`\nDefault: false\n\nRun the casperjs script(s) in test mode. Thus allowing you to split up your tests (casperjs test tests/)\n\n#### includes\nType: `String`\nDefault: undefined\n\nComma separated list of scripts to \"include\" before executing tests.\n\n#### pre\nType: `String`\nDefault: undefined\n\nScripts to be executed before the test suite\n\n#### post\nType: `String`\nDefault: undefined\n\nScripts to be executed after the test suite\n\n#### direct\nType: `Boolean`\nDefault: false\n\nOutput log messages directly to the console\n\n#### log-level\nType: `String`\nDefault: `error`\nOptions: `debug` `info` `warning` `error`\n\nSets the casperjs logging level\n\n#### fail-fast\nType: `boolean`\nDefault: false\n\nTerminate as soon as a first failure is encountered.\n\n### Usage Examples\n\nBasic usage\n```js\ncasper : {\n yourTask : {\n    options : {\n      test : true\n    },\n    files : {\n      'xunit/casper-results.xml' : ['test/functionalTests.js']\n    }\n  }\n}\n```\n\nBasic Parallel usage\n```js\ncasper : {\n yourTask : {\n    options : {\n      test : true,\n      parallel : true,\n      concurrency : 5\n    },\n    files : {\n      'xunit/casper-results.xml' : ['test/functionalTests.js'],\n      'xunit/casper-results-2.xml' : ['test/functionalTests2.js'],\n    }\n  }\n}\n```\n\nGlobal options and custom destination\n\n```js\ncasper : {\n  options : {\n    test : true,\n    includes : 'path/to/inc.js',\n    post : 'path/to/post.js',\n    pre : 'path/to/pre.js',\n    'log-level' : 'warning',\n    'fail-fast' : true\n  },\n  yourTask : {\n    src: ['path/to/tests/*_test.js'],\n    dest : function(input) {\n      return input.replace(/\\.js$/,'.xml');\n    }\n  }\n}\n```\n\n### Options and Arguments\nCasperJS supports options and arguments on the [command line](http://docs.casperjs.org/en/latest/cli.html).\n\n`casperjs test.js baz --foo=bar`\n\nGrunt tasks can accept additional arguments and grunt-casper will pass these through to CasperJS, for instance\n\n`grunt casper:yourTask:baz:--foo=bar`\n\nwill pass `baz` as an argument and `foo` as an option with a value of `bar`.  These are then available in your CasperJS script \n\n```js\ncasper.cli.args.indexOf('baz'); // 0\ncasper.cli.options.foo; //bar\n```\n\nArguments and options will be ignored in `test` mode as CasperJS does not support them.\n\n## Release History\n\n * 2014-01-24   v0.2.1   Refactored exit logic\n * 2014-01-14   v0.2.0   Refactored non-parallel Runs, fixing --fail-fast parameter   \n * 2013-11-22            Refactored task dependencies, added parallel option and task duration\n * 2013-10-08   v0.1.4   Merged pull request - cwd spawn option\n * 2013-09-05   v0.1.3   Fixed logging from grunt.verbose -> grunt.log\n * 2013-08-10   v0.1.2   Added xunit support\n * 2013-02-01   v0.1.1   Update Task To Run With grunt0.4.0rc7\n * 2013-01-01   v0.1.0   Initial Release\n\n---\n\nTask submitted by [Chris Miller](http://chris-miller.me)\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/iamchrismiller/grunt-casper",
  "_id": "grunt-casper@0.2.1",
  "dist": {
    "shasum": "943bd63250d5ab20ee345e7a524b243cac4ffd06"
  },
  "_from": "grunt-casper@",
  "_resolved": "https://registry.npmjs.org/grunt-casper/-/grunt-casper-0.2.1.tgz"
}
